
# const ala = 1 + 1
# 
# fun probablyValid(i, j) {
#     let
#         const bela = 2 const cela = bela + 3
#     in
#         bela + cela + i + j + ala
#     tel
# }
# 
# fun also_prob_valid(i) {
#     let const c = 1 in
#         let const cc = c+1 in
#             2+2*also_prob_valid(1, 1)+ ala+ i / cc + c
#         tel 
#     tel
# }
# 
# fun something(i, y) {
#     if 1 then 2 else 3 fi
# }
# 
# fun fibonacci(i) {
#     if i < 2 then 
#         i 
#     else 
#         fibonacci(i - 1) + fibonacci(i - 2)
#     fi
# }

# fun blabla(i, j) {
#     let
#        fun loc1(i) { i }
#        fun loc2(i) { loc1(i) }
#        fun loc3(i) { loc1(i) + loc2(i) }
#        fun loc4(i) { loc1(i) + loc2(i) + loc3(i) }
#     in 
#         loc1(i)
#     tel
# }

# fun ifthenelse(i) {
#     let
#         fun true(i) { i + 1 }
#         fun false(j) { 
#             let
#                 const zzz = let
#                     fun anotherone(a, b, c) {
#                         if 
#                             let const asdf = 1 in asdf + true(1) tel 
#                         then 
#                             a + b + c
#                         else 
#                             a * b * c 
#                         fi
#                     }
#                 in anotherone(1, 2, 3) tel
#             in
#                 zzz + 3
#             tel
#         }
#     in 
#         if 1 == 1
#         then true(i) 
#         else false(i) 
#         fi 
#     tel
# }

# fun something(i) {
#     i / 3
# }

type Name = String 

type List
    | Cons (Int, List)
    | Nil ()

fun fibonacci(i: Int): Int {
    let 
        const pred: Bool = (i == 0 || i == 1)
    in
        if pred 
        then i 
        else fibonacci(i - 1) + fibonacci(i - 2)
}

fun seq(i: Double): Double {
    fibonacci(1) ;;
    fibonacci(2) ;;
    fibonacci(3) ;;
    fibonacci(4)
}

# 
# fun something1(i) {
#     (let const ci = 4 in ci) + i
# }
# 
# fun something2(i) {
#     let 
#         const ci = 4 
#     in
#         if ci then ci
#         else if ci - 1 then ci + 1
#         else 0
# }



